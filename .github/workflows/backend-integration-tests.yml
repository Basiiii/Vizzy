name: Backend Integration Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/vizzy-backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/vizzy-backend/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend/vizzy-backend

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/vizzy-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        run: |
          curl -fsSL https://github.com/supabase/cli/releases/download/v2.22.1/supabase_2.22.1_linux_amd64.deb -o supabase.deb
          sudo dpkg -i supabase.deb
          rm supabase.deb

      - name: Initialize & Link Supabase
        run: |
          supabase init --force
          echo "Logging in to Supabase..."
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          echo "Linking to hosted project..."
          supabase link --project-ref pblciirmszmcndmaxcvo --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_AUTH_EXTERNAL_APPLE_SECRET: "test-secret"
          SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN: "test-token"
          S3_HOST: "test-host"
          S3_REGION: "test-region"
          S3_ACCESS_KEY: "test-access-key"
          S3_SECRET_KEY: "test-secret-key"
          OPENAI_API_KEY: "test-openai-key"

      - name: Auto-repair all migrations
        run: |
          echo "Checking for migration mismatches…"
          # Get all remote migrations that need to be reverted
          REMOTE_MIGRATIONS=$(supabase migration list --linked --password $SUPABASE_DB_PASSWORD | \
            awk -F'│' 'NR>2 {
              gsub(/ /,"",$1); gsub(/ /,"",$2);
              if ($1=="" && $2!="") print $2;
            }')
          
          # Repair each remote migration
          if [ -n "$REMOTE_MIGRATIONS" ]; then
            echo "Found migrations to repair:"
            echo "$REMOTE_MIGRATIONS"
            echo "$REMOTE_MIGRATIONS" | while read version; do
              echo "Repairing migration $version → reverted"
              echo y | supabase migration repair $version \
                --status reverted \
                --password $SUPABASE_DB_PASSWORD \
                --linked
            done
          else
            echo "No migrations need repair"
          fi
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Pull database schema with auto-repair
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          echo "Pulling schema with auto-repair..."
          
          # Show Supabase CLI version
          supabase --version
          
          # First attempt - capture full output
          echo "First attempt at pulling schema..."
          PULL_OUTPUT=$(supabase db pull --password $SUPABASE_DB_PASSWORD 2>&1)
          PULL_STATUS=$?
          
          # Always show the output
          echo "Pull command output:"
          echo "$PULL_OUTPUT"
          
          # If successful, we're done
          if [ $PULL_STATUS -eq 0 ]; then
            echo "Schema pulled successfully on first try"
            exit 0
          fi
          
          # Keep trying until successful
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            
            # Check if there's a migration mismatch error
            if echo "$PULL_OUTPUT" | grep -q "migration history does not match"; then
              # Extract the migration version from the error message
              VERSION=$(echo "$PULL_OUTPUT" | grep -o "[0-9]\{14\}" | tail -1)
              
              if [ -n "$VERSION" ]; then
                echo "Repairing migration $VERSION → reverted"
                REPAIR_OUTPUT=$(echo y | supabase migration repair $VERSION \
                  --status reverted \
                  --password $SUPABASE_DB_PASSWORD \
                  --linked 2>&1)
                echo "$REPAIR_OUTPUT"
                
                # Try again
                echo "Retrying pull after repair..."
                PULL_OUTPUT=$(supabase db pull --password $SUPABASE_DB_PASSWORD 2>&1)
                PULL_STATUS=$?
                
                echo "Pull command output:"
                echo "$PULL_OUTPUT"
                
                if [ $PULL_STATUS -eq 0 ]; then
                  echo "Schema pulled successfully after repair"
                  exit 0
                fi
              else
                echo "Failed to extract migration version from error"
                echo "Full error output:"
                echo "$PULL_OUTPUT"
                exit 1
              fi
            else
              echo "Error is not a migration mismatch. Full error output:"
              echo "$PULL_OUTPUT"
              exit 1
            fi
          done
          
          echo "Failed to repair migrations after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Start Supabase services
        run: |
          supabase start > supabase_output.txt 2>&1
          cat supabase_output.txt
          supabase db reset
        env:
          SUPABASE_AUTH_EXTERNAL_APPLE_SECRET: "test-secret"
          SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN: "test-token"
          S3_HOST: "test-host"
          S3_REGION: "test-region"
          S3_ACCESS_KEY: "test-access-key"
          S3_SECRET_KEY: "test-secret-key"
          OPENAI_API_KEY: "test-openai-key"

      - name: Extract Supabase credentials
        id: supabase-credentials
        run: |
          ANON_KEY=$(supabase status | grep 'anon key'        | awk '{print $NF}')
          SERVICE_KEY=$(supabase status | grep 'service_role' | awk '{print $NF}')
          echo "ANON_KEY=$ANON_KEY"   >> $GITHUB_ENV
          echo "SERVICE_KEY=$SERVICE_KEY" >> $GITHUB_ENV

      - name: Run integration tests
        run: npm run test:integration
        env:
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: ${{ env.ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SERVICE_KEY }}